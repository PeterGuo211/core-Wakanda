/*Wakanda Software (the “Software”) and the corresponding source code remainthe exclusive property of 4D and/or its licensors and are protected by nationaland/or international legislations.This file is part of the source code of the Software provided under the relevantWakanda License Agreement available on http://www.wakanda.org/license whose complianceconstitutes a prerequisite to any use of this file and more generally of theSoftware and the corresponding source code.*//**
* @author Sebastien.Courvoisier@4d.com
*/YUI.add('watest', function(Y) {    /**     * YUI JavaScript Testing Framework - Wakanda Extension     *     * @module watest     */	Y.ArrayAssert.itemsAreSimilar = function (expected, actual, strictOrder, message) {		Y.Assert._increment();		var extra = [];		for (var i = 0; i < actual.length; i++) {			var found = false;			for (var j = 0; j < expected.length; j++) {				if (actual[i] == expected[j]) {					found = true;					break;				}			}			if (!found) extra.push(actual[i]);		}		var missing = [];		for (var i = 0; i < expected.length; i++) {			var found = false;			for (var j = 0; j < actual.length; j++) {				if (expected[i] == actual[j]) {					found = true;					break;				}			}			if (!found) missing.push(expected[i]);		}		var failure = false;		var failureMessage = "";			if (expected.length < actual.length) {				failure = true;					failureMessage = "Array should have a length of " + expected.length + " but has a GREATER length of " + actual.length;		}		else if (expected.length > actual.length) {			failure = true;				failureMessage = "Array should have a length of " + expected.length + " but has a LESSER length of " + actual.length;		}		else {			var same = true;			for (var i = 0; i < expected.length; i++) {				if (expected[i] != actual[i]) {					same = false;					break;				}			}			if (!same) {				for (var i = 0; i < expected.length; i++) {					var found = false;					for (var j = 0; j < actual.length; j++) {						if (expected[i] == actual[j]) {							found = true;							break;						}					}					if (!found) {						failure = true;						failureMessage = "Values in position " + i + " are not equal. Expected: " + expected[i] + ", Actual: " + actual[i];						break;					}				}				if (!failure && strictOrder) {					failure = true;					failureMessage = "Array contains all the expected values but not in the expected order";				} 			}		}		if (failure) {			if (extra.length) failureMessage += ". Extra value(s): " + extra.join(", ");			if (missing.length) failureMessage += ". Missing value(s): " + missing.join(", ");			Y.Assert.fail(Y.Assert._formatMessage(message, failureMessage));		}	};}, '1.0.0' ,{requires:['test', 'event-simulate']});