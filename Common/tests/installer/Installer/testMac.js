function mount (image) {	if (typeof env === 'undefined' || typeof env.TESTBASEPATH === 'undefined') {		if (typeof application !== 'undefined' && typeof application.getFolder === 'function') {			var scriptPath = application.getFolder('path') + 'scriptMac.sh';		}		else {			return [];		}	}	else {		var scriptPath = env.TESTBASEPATH + '/Installer/scriptMac.sh';	}	var chmodWorker = new SystemWorker('bash -c "chmod 775 ' + scriptPath + '"');	chmodWorker.onterminated = function() {		exitWait();	}	wait();	var output = '';	var mountWorker = new SystemWorker(scriptPath + ' "' + image + '"');	mountWorker.onmessage = function() {	    output += arguments[0].data.toString();	};	mountWorker.onterminated = function() {		exitWait();	}	wait();	var result = [];	output.replace(/^\s+/g,'').replace(/\s+$/g,'').split(/\r?\n/).forEach(function (outputLine) {		if (/wakanda\s/i.test(outputLine) && !(/\.dmg/i.test(outputLine))) {			result.push({				device: outputLine.split(/\s/i)[0],				mountPoint: outputLine.split(/\s/i).slice(2).join(' ')			});		}	});	return result;};function umount (device) {	var output = '';	var umountWorker = new SystemWorker('hdiutil detach "' + device + '" -force');	umountWorker.onterminated = function() {		exitWait();	}	umountWorker.onmessage = function() {	    output += arguments[0].data.toString();	};	wait();	return output.replace(/^\s+/g,'').replace(/\s+$/g,'').split(/\r?\n/);};if (typeof env === 'undefined' || typeof env.INSTALLERPATH === 'undefined') {	var imagePath = '/Users/wakandaqa/Desktop/Testing/Installer.dmg';}else {	var imagePath = env.INSTALLERPATH;}var imagePathEnterprise = imagePath.replace('Installer', 'InstallerEnterprise');var mounted = null;var testCase = {	name: 'Test of the installer on Mac',	test0MountCommunity: function () {		var mountImages = mount(imagePath);		Y.Assert.isArray(mountImages);		Y.Assert.areSame(1, mountImages.length, "Installer couldn't be mounted or is already mounted");		Y.Assert.isNotNull(mountImages[0], "Image not mounted (1)");		Y.Assert.isObject(mountImages[0], "Image not mounted (2)");		Y.Assert.isString(mountImages[0].device, "Device not defined");		Y.Assert.isString(mountImages[0].mountPoint, "Mount point not defined");		mounted = mountImages[0];	},	test1HasExpectedContentCommunity: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isTrue(mountedFolder.exists,  "Target folder '" + mounted.mountPoint + "' doesn't exist");		var actual = [];		mountedFolder.forEachFolder(function(folder) {			if (/wakanda/i.test(folder.name)) {				actual.push(folder.name);			}		});		Y.ArrayAssert.itemsAreSimilar(['Wakanda Studio.app', 'Wakanda Server.app'], actual);	},	test2CheckVersionCommunity: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var studioInfo = '';		var getStudioInfoWorker = new SystemWorker('defaults read "' + mounted.mountPoint + '/Wakanda Studio.app/Contents/Info.plist" CFBundleShortVersionString');		getStudioInfoWorker.onmessage = function() {			studioInfo += arguments[0].data.toString();		};		getStudioInfoWorker.onterminated = function() {			exitWait();		}		wait();		var serverInfo = '';		var getServerInfoWorker = new SystemWorker('defaults read "' + mounted.mountPoint + '/Wakanda Server.app/Contents/Info.plist" CFBundleShortVersionString');		getServerInfoWorker.onmessage = function() {			serverInfo += arguments[0].data.toString();		};		getServerInfoWorker.onterminated = function() {			exitWait();		}		wait();		Y.Assert.areSame('7 build 7.' + env.CHANGELIST, studioInfo.replace(/^\s+/g,'').replace(/\s+$/g,''));		Y.Assert.areSame('7 build 7.' + env.CHANGELIST, serverInfo.replace(/^\s+/g,'').replace(/\s+$/g,''));	},	test3CheckLicenseCommunity: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var expected = File(env.P4_WORKSPACE_PATH + '/depot/Wakanda/main/Common/Licenses/license_Stabilisation.txt'); 		var actual = File(env.WORKSPACE + '/license.txt');		Y.Assert.isTrue(expected.exists, "Expected license not found");		Y.Assert.isTrue(actual.exists, "Actual license not found");		var expectedContent = expected.toString().replace(/[^a-z]+/gi,'');		var actualContent = actual.toString().replace(/[^a-z]+/gi,'');		Y.Assert.isTrue(actualContent.indexOf(expectedContent) !== -1, "The actual license is different from the expected one");	},	test4UmountCommunity: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var result = umount(mounted.device);		Y.Assert.isArray(result, "Wrong result for umount (1)");		Y.Assert.areSame(2, result.length, "Wrong result for umount (2)");		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isFalse(mountedFolder.exists, "Installer couldn't be umounted");	},	test5MountEnterprise: function () {		mounted = null;		var mountImages = mount(imagePathEnterprise);		Y.Assert.isArray(mountImages);		Y.Assert.areSame(1, mountImages.length, "Installer couldn't be mounted or is already mounted");		Y.Assert.isNotNull(mountImages[0], "Image not mounted (1)");		Y.Assert.isObject(mountImages[0], "Image not mounted (2)");		Y.Assert.isString(mountImages[0].device, "Device not defined");		Y.Assert.isString(mountImages[0].mountPoint, "Mount point not defined");		mounted = mountImages[0];	},	test6HasExpectedContentEnterprise: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isTrue(mountedFolder.exists,  "Target folder '" + mounted.mountPoint + "' doesn't exist");		var actual = [];		mountedFolder.forEachFolder(function(folder) {			if (/wakanda/i.test(folder.name)) {				actual.push(folder.name);			}		});		Y.ArrayAssert.itemsAreSimilar(['Wakanda Enterprise Studio.app', 'Wakanda Enterprise Server.app'], actual);	},	test7CheckVersionEnterprise: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var studioInfo = '';		var getStudioInfoWorker = new SystemWorker('defaults read "' + mounted.mountPoint + '/Wakanda Enterprise Studio.app/Contents/Info.plist" CFBundleShortVersionString');		getStudioInfoWorker.onmessage = function() {			studioInfo += arguments[0].data.toString();		};		getStudioInfoWorker.onterminated = function() {			exitWait();		}		wait();		var serverInfo = '';		var getServerInfoWorker = new SystemWorker('defaults read "' + mounted.mountPoint + '/Wakanda Enterprise Server.app/Contents/Info.plist" CFBundleShortVersionString');		getServerInfoWorker.onmessage = function() {			serverInfo += arguments[0].data.toString();		};		getServerInfoWorker.onterminated = function() {			exitWait();		}		wait();		Y.Assert.areSame('7 build 7.' + env.CHANGELIST, studioInfo.replace(/^\s+/g,'').replace(/\s+$/g,''));		Y.Assert.areSame('7 build 7.' + env.CHANGELIST, serverInfo.replace(/^\s+/g,'').replace(/\s+$/g,''));	},	test8CheckLicenseEnterprise: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var expected = File(env.P4_WORKSPACE_PATH + '/depot/Wakanda/main/Common/Licenses/license_Stabilisation.txt'); 		var actual = File(env.WORKSPACE + '/license.txt');		Y.Assert.isTrue(expected.exists, "Expected license not found");		Y.Assert.isTrue(actual.exists, "Actual license not found");		var expectedContent = expected.toString().replace(/[^a-z]+/gi,'');		var actualContent = actual.toString().replace(/[^a-z]+/gi,'');		Y.Assert.isTrue(actualContent.indexOf(expectedContent) !== -1, "The actual license is different from the expected one");	},	test9UmountEnterprise: function () {		Y.Assert.isNotNull(mounted, "Installer couldn't be mounted");		var result = umount(mounted.device);		Y.Assert.isArray(result, "Wrong result for umount (1)");		Y.Assert.areSame(2, result.length, "Wrong result for umount (2)");		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isFalse(mountedFolder.exists, "Installer couldn't be umounted");	}};if (typeof runFromCLI === 'undefined' || runFromCLI === false) {	require('unitTest').run(testCase).getReport();}