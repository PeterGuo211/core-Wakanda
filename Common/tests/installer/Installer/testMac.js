function mount (image) {	if (typeof env === 'undefined' || typeof env.TESTBASEPATH === 'undefined') {		if (typeof application !== 'undefined' && typeof application.getFolder === 'function') {			var scriptPath = application.getFolder('path') + 'scriptMac.sh';		}		else {			return [];		}	}	else {		var scriptPath = env.TESTBASEPATH + '/Installer/scriptMac.sh';	}	var chmodWorker = new SystemWorker('bash -c "chmod 775 ' + scriptPath + '"');	chmodWorker.onterminated = function() {		exitWait();	}	wait();	require('unitTest').log(scriptPath + ' "' + image + '"');	var output = '';	var mountWorker = new SystemWorker(scriptPath + ' "' + image + '"');	mountWorker.onmessage = function() {	    output += arguments[0].data.toString();	};	mountWorker.onterminated = function() {		exitWait();	}	wait();	require('unitTest').log(output);	var result = [];	output.replace(/^\s+/g,'').replace(/\s+$/g,'').split(/\r?\n/).forEach(function (outputLine) {		if (/wakanda\s/i.test(outputLine) && !(/\.dmg/i.test(outputLine))) {			result.push({				device: outputLine.split(/\s/i)[0],				mountPoint: outputLine.split(/\s/i).slice(2).join(' ')			});		}	});	require('unitTest').log(result);	return result;};function umount (device) {	var output = '';	var umountWorker = new SystemWorker('hdiutil detach "' + device + '" -force');	umountWorker.onterminated = function() {		exitWait();	}	umountWorker.onmessage = function() {	    output += arguments[0].data.toString();	};	wait();	return output.replace(/^\s+/g,'').replace(/\s+$/g,'').split(/\r?\n/);};if (typeof env === 'undefined' || typeof env.INSTALLERPATH === 'undefined') {	var imagePath = '/Users/wakandaqa/Desktop/Testing/Installer.dmg';}else {	var imagePath = env.INSTALLERPATH;}var mounted = null;var testCase = {	name: 'Test of the installer on Mac',	test0Mount: function () {		var mountImages = mount(imagePath);		Y.Assert.isArray(mountImages);		Y.Assert.areSame(1, mountImages.length);		Y.Assert.isNotNull(mountImages[0]);		Y.Assert.isObject(mountImages[0]);		Y.Assert.isString(mountImages[0].device);		Y.Assert.isString(mountImages[0].mountPoint);		mounted = mountImages[0];	},	test1HasExpectedContent: function () {		Y.Assert.isNotNull(mounted);		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isTrue(mountedFolder.exists);		var actual = [];		mountedFolder.forEachFolder(function(folder) {			if (/wakanda/i.test(folder.name)) {				actual.push(folder.name);			}		});		Y.ArrayAssert.itemsAreSimilar(['Wakanda Studio.app', 'Wakanda Server.app'], actual);	},	test2Umount: function () {		Y.Assert.isNotNull(mounted);		var result = umount(mounted.device);		Y.Assert.isArray(result);		Y.Assert.areSame(2, result.length);		var mountedFolder = Folder(mounted.mountPoint);		Y.Assert.isFalse(mountedFolder.exists);	}};if (typeof runFromCLI === 'undefined' || runFromCLI === false) {	require('unitTest').run(testCase).getReport();}