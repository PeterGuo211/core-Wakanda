function contents (packagePath) {	if (typeof env === 'undefined' || typeof env.TESTBASEPATH === 'undefined') {		if (typeof application !== 'undefined' && typeof application.getFolder === 'function') {			var scriptPath = application.getFolder('path') + 'scriptLinux.sh';		}		else {			return [];		}	}	else {		var scriptPath = env.TESTBASEPATH + '/Installer/scriptLinux.sh';	}	var chmodWorker = new SystemWorker('bash -c "chmod 775' + scriptPath + '"');	chmodWorker.onterminated = function() {		exitWait();	}	wait();	var output = '';	var contentsWorker = new SystemWorker(scriptPath + " " + "showContents," + '"' + packagePath + '"');	contentsWorker.onmessage = function() {	    output += arguments[0].data.toString();	};	contentsWorker.onterminated = function() {		exitWait();	}	wait();	var result = [];	output.replace(/^\s+/g,'').replace(/\s+$/g,'').split(/\r?\n/).forEach(function (outputLine) {		if (/bin\/wakanda/i.test(outputLine) || /license_/i.test(outputLine)) {			var line = outputLine.split(/\s/);			result.push(line[line.length - 1]);		}	});	return result;}function isUppercaseOrLowercase(string) {	var i=0,		ch='';	while (i <= string.length){    character = string.charAt(i);    if (!isNaN(character * 1)){    	console.log('Numeric');    }else{    	if (character == character.toUpperCase()) {    		console.log('Uppercase');    		return false;    	}	    	if (character == character.toLowerCase()){    		console.log('Lowercase');    		return true;    	}    }    i++;	}}function buildVersion () {		var result = null;		if (env.WAKANDA_BRANCH == 'main') {		result = 0;	} else {		result = env.WAKANDA_BRANCH.replace(/\D+/,'');	} return result;	}function version () {	var result = null;		if (env.WAKANDA_BRANCH == 'main') {		result = 'Dev';	} else {		result = env.WAKANDA_BRANCH.replace(/\D+/,'');	} return result;} /** Package Deb or tgz : 32bit & 64bit **//** How to get installer TGZ : 32bit & 64bit && Deb : 32bit & 64bit **/if (typeof env === 'undefined') {	 	var packagePath = '/home/gbeauny/Desktop/WakTest/Testing/wakanda_6.0-144583_amd64.deb', 		packagePathTgz = '/home/gbeauny/Desktop/WakTest/Testing/wakanda_6.0-144583_amd64.tgz';} else {	var packagePath = env.BUILD_TEST_DIR + '/Installer.deb',		packagePathTgz = env.BUILD_TEST_DIR + '/Installer.tgz';}var testCase = {	name: 'Test of the installer 64bit - 32bit on Linux : .deb & .tgz',	/*test1HasExpectedContent: function () {		var packageFile = File(packagePath);		Y.Assert.isTrue(packageFile.exists);		var actual = contents(packagePath);		Y.ArrayAssert.itemsAreSimilar(['./opt/wakanda/bin/wakanda', './opt/wakanda/license_Production.txt'], actual);	}*//** Test All-in-one 64bit / 32bit Tgz **/	/** UnArchivage **/ 	/* Check if folder "wakanda" exist after unArchive it */	testUnarchive_1: function () { 			var archiveTgzFile = File(packagePathTgz);                console.log(archiveTgzFile); 		Y.Assert.isTrue(archiveTgzFile.exists);		var archiveFolder = Folder(env.BUILD_TEST_DIR + "/wakanda");				/**		*		*Debug Static Value		*		*var archiveFolder = Folder("/home/gbeauny/Desktop/WakTest/Testing/" + "wakanda");		*		**/			if (archiveFolder.exists) {			var rmUnArchive = SystemWorker.exec('sudo rm -rf' + env.BUILD_TEST_DIR + "/wakanda");			/**			*			*Debug Static Value			*			*var rmUnArchive = SystemWorker.exec('sudo rm -rf /home/gbeauny/Desktop/WakTest/Testing/' + "wakanda");			*			**/			if (rmUnArchive != null) {				console.log("rmArchive done : " + rmUnArchive.output.toString());			} else { 				console.log("rmArchive failed : " + rmUnArchive.error.toString());			}			var unArchive = SystemWorker.exec('tar -xzvf' + packagePathTgz + " " + '-C' + env.BUILD_TEST_DIR + ''); 			/**			*			*Debug Static Value			*			*var unArchive = SystemWorker.exec('tar -xzvf' + archiveTgzPath + " " + '-C "/home/gbeauny/Desktop/WakTest/Testing/"');			*			**/			if (unArchive != null) {				console.log("unArchive done : " + unArchive.output.toString());			} else { 				console.log("unArchive failed : " + unArchive.error.toString());			}		} else {			 var unArchive = SystemWorker.exec('tar -xzvf' + packagePathTgz + " " + '-C' + env.BUILD_TEST_DIR + '');						/**			*			*Debug Static Value			*			*var unArchive = SystemWorker.exec('tar -xzvf' + archiveTgzPath + " " + '-C "/home/gbeauny/Desktop/WakTest/Testing/"');			*			**/			if (unArchive != null) {				console.log("unArchive done : " + unArchive.output.toString());			} else { 				console.log("unArchive failed : " + unArchive.error.toString());			}		}        console.log(archiveFolder); 	Y.Assert.isTrue(archiveFolder.exists); 	},/** Test All-in-one 64bit / 32bit Deb **//** Upgrade & Removing with lastVersion **/	testUpgradePackage_0: function () {			var upgrade = new SystemWorker('sudo dpkg -i' + " " + packagePath),			buildNumber = env.CHANGELIST,			output = '';		/**		* 	Debug Static Value 		*		*	buildVersion = 6,		*	buildNumber = 144583,		*		**/		upgrade.onmessage = function () {			if (arguments[0].data != null) {				console.log("Upgrade done : " + arguments[0].data.toString()); 			} else {				console.log("Upgrade failed : " + arguments[0].data.toString());			}		};		upgrade.onterminated = function () {			exitWait();		}; 		wait();	    var wakPath = Folder('/opt/wakanda/'), 	    	wakExe =File('/opt/wakanda/bin/wakanda'),	    	wakScript = File('/etc/init.d/wakanda'), 	    	wakSymLink = File('/usr/local/bin/wakanda');	Y.Assert.isTrue(wakPath.exists);	Y.Assert.isTrue(wakExe.exists);	Y.Assert.isTrue(wakScript.exists);	Y.Assert.isTrue(wakSymLink.exists);		var upgradeVersion = SystemWorker.exec('/opt/wakanda/bin/wakanda --version');				if( upgradeVersion != null) {					console.log("UpgradeVersion done : " + upgradeVersion.output.toString());				output += upgradeVersion.output.toString();			} else {				console.log("UpgradeVersion failed : " + upgradeVersion.error.toString());			}		var strMatch = buildVersion() + '.' + buildNumber,			result = output.replace(/\r?\n/g, '').match(strMatch);	Y.Assert.areEqual(buildVersion() + '.' + buildNumber,result);	}, 	testRemovingPackage_0: function () {		var removing = new SystemWorker('sudo dpkg --purge wakanda');		removing.onmessage = function () {			if (arguments[0].data != null) {				console.log("Removing done : " + arguments[0].data.toString());			} else {				console.log("Removing failed : " + arguments[0].data.toString());			}		}; 		removing.onterminated = function () { 			exitWait();		};		wait();		var wakPath = Folder('/opt/wakanda/'),			wakExe = File('/opt/wakanda/bin/wakanda'),			wakScript = File('/etc/init.d/wakanda'),			wakSymLink = File('/usr/local/bin/wakanda'); 	Y.Assert.isFalse(wakPath.exists);	Y.Assert.isFalse(wakExe.exists);	Y.Assert.isFalse(wakScript.exists);	Y.Assert.isFalse(wakSymLink.exists);	},/** Installation **/		/* Check if folder "/opt/wakanda" exist after to have install the package */	testInstallPackage_1: function () {	 	 	var packageFile = File(packagePath);	 	Y.Assert.isTrue(packageFile.exists);	 	var wakPath = Folder('/opt/wakanda/');	 	if (wakPath.exists) {	 		var unInstall = SystemWorker.exec('sudo dpkg --purge wakanda');		 		if (unInstall != null) {		 			console.log("Uninstall done : " + unInstall.output.toString());		 		} else {		 			console.log("Uninstall failed : " + unInstall.error.toString()); 		 		}			var install = SystemWorker.exec('sudo dpkg -i' + " " + packagePath);				if (install != null) {					console.log("install done : " + update.output.toString()); 				} else {					console.log("install failed : " + update.error.toString());				}	 	} else {	 		var install = SystemWorker.exec('sudo dpkg -i' + " " + packagePath);		 		if (install != null) {					console.log("install done : " + install.output); 				} else {					console.log("install failed : " + install.error.toString());				}	 	}	 	/** Check Wakanda if status is "Not Running" **/		var checkStatus = SystemWorker.exec('sudo service wakanda status');			if (checkStatus != null) {				console.log(checkStatus.output.toString());				if (checkStatus.output.toString() === " * wakanda is not running") {					var stopServer = SystemWorker.exec('sudo service wakanda stop');						if(stopServer != null) {							console.log("stopStatus done : " + stopServer.output.toString()); 						} else { 							console.log("stopStatus Failed : " +  stopServer.error.toString());						}			    } else {			    	console.log('Server is not running');			    }			} else {				console.log("CheckStatus failed :" + checkStatus.error.toString());			}				var newWakPathWakanda = Folder('/opt/wakanda/'),			newWakPathWakandaBin = Folder('/opt/wakanda/bin');							    Y.Assert.isTrue(isUppercaseOrLowercase(newWakPathWakanda.name));    Y.Assert.isTrue(newWakPathWakandaBin.exists);	Y.Assert.isTrue(newWakPathWakanda.exists);	},	testInstallPackage_2: function () {		var getLicence = SystemWorker.exec('bash -c "ls /opt/wakanda/ | tail -1"');						if (getLicence !=null) {			console.log("getLicence done : " + getLicence.output.toString()); 		} else { 			console.log("getLicence failed : " + getLicence.error.toString());		}		var licenceFile = getLicence.output.toString().replace(/\r?\n/g, "");		var newFileLicence = File("/opt/wakanda/" + licenceFile);			Y.Assert.isTrue(newFileLicence.exists);	},	testInstallPackage_3: function () {			var typeLicence = ['license_Production.txt','license_Stabilisation.txt'];		var getLicence = SystemWorker.exec('bash -c "ls /opt/wakanda/ | tail -1"');		var licenceFile = getLicence.output.toString().replace(/\r?\n/g, "");					if (licenceFile == "license_Production.txt") {				diffLicence = SystemWorker.exec('diff --normal /opt/wakanda/' + typeLicence[0] + " " + env.P4_WORKSPACE_PATH + "/Wakanda/" + env.WAKANDA_BRANCH + "/Common/Licenses/" + typeLicence[0]);			} else {				diffLicence = SystemWorker.exec('diff --normal /opt/wakanda/' + typeLicence[0] + " " + env.P4_WORKSPACE_PATH + "/Wakanda/" + env.WAKANDA_BRANCH + "/Common/Licenses/" + typeLicence[1]);			}						/**			*	Debug Static Value 			*			*	diffLicence = SystemWorker.exec('diff --normal /opt/wakanda/' + typeLicence[0] + " " + "/home/gbeauny/perforce/workspaceLinux12.04/depot/Wakanda/main/Common/Licenses/" + typeLicence[0])			*			**/			// if (typeLicence !=null) {			// 	console.log("Licence files aren't the same : " + diffLicence.output.toString());			// } else {			// 	console.log("Licence files are the same");			// }						console.log("Diff between licence file" + " " + diffLicence.output.toString());		Y.Assert.areEqual("",diffLicence.output.toString());			},	testInstallPackage_4: function () {			var scriptPath = env.TESTBASEPATH + '/Installer/scriptLinux.sh';		var	chmodFile = SystemWorker.exec('bash -c "chmod 775 ' + scriptPath + '"');		var	permissionWakandaFolder = SystemWorker.exec(scriptPath + " " + "displayRights");				console.log("RightsActual" + " " + permissionWakandaFolder);					if (permissionWakandaFolder !=null) {				console.log("Permission are : " + permissionWakandaFolder.output.toString());			} else {				console.log("Permission failed : " + permissionWakandaFolder.error.toString());			}		var permissionWakandaFolder2 = permissionWakandaFolder.output.toString().replace(/\r?\n/g, '');				console.log("RightsActual" + " " + permissionWakandaFolder2);			Y.Assert.areEqual('755 drwxr-xr-x',permissionWakandaFolder2);	}, 	testInstallPackage_5: function () {	//Check if we have the number of files in the zip and the package		},	/** Execution **/	testExecutionPackage_6: function () {		//Check if we have the number of files in the zip and the package	var scriptPath = env.TESTBASEPATH + '/Installer/scriptLinux.sh';	var	chmodFile = SystemWorker.exec('bash -c "chmod 775 ' + scriptPath + '"');	var	architectureType = SystemWorker.exec(scriptPath + " " + "displayArchitectureType");	var	architectureSystem = SystemWorker.exec('arch');		/**		*	Debug Static Value 		*		*	architectureNumber = [32,64];		**/		//To check		architectureNumber = [32,64];				console.log("Current Path to Shell Script" + " " + scriptPath);						if (architectureType != null) {			console.log("achitectureType is : " + architectureType.output.toString());		} else {			console.log("achitectureType failed : " + architectureType.error.toString());		}		var architectureType2 = architectureType.output.toString().replace(/\r?\n/g, ''),			architectureSystem2 = architectureSystem.output.toString().replace(/\r?\n/g, '');					console.log("ArchitectureType & System" + " " + architectureType2 + " " + architectureSystem2);		if (architectureSystem2 == "x86_64") {		Y.Assert.areEqual('' + architectureNumber[1] + '-bit',architectureType2);	} else {		Y.Assert.areEqual('' + architectureNumber[0] + '-bit',architectureType2);	}		}, 	testExecutionPackage_7: function () {		var versionWak = SystemWorker.exec('/opt/wakanda/bin/wakanda --version');				/**		*	Debug Static Values		*		*	version = '6', 		*	buildVersion = 6,		*	buildNumber = 144583;		*		**/		if (versionWak !=null) {			console.log("versionWak is : " + versionWak.output.toString());		} else {			console.log("versionWak failed : " + versionWak.error.toString());		}		var versionWak2 = versionWak.output.toString().replace(/\r?\n/g, '');		/**	*	Debug Static Assert 	*	*	Y.Assert.areEqual("Wakanda Server" + " " + version + " " + "build" + " " + buildVersion + "." + buildNumber,versionWak2);	**/	//To Check	Y.Assert.areEqual("Wakanda Server" + " " + version() + " " + "build" + " " + buildVersion() + "." + env.CHANGELIST,versionWak2);	}, 	testExecutionPackage_8: function () { 		var startWakanda = new SystemWorker('sudo service wakanda start'),		output = '';	startWakanda.onmessage = function () {		if (arguments[0].data != null) {			console.log("startWakanda : " + arguments[0].data.toString());			output += arguments[0].data.toString();		} else {			console.log("startWakanda failed : " + arguments[0].data.toString());		}	};	startWakanda.onterminated = function () {		exitWait();		};	wait();			var strMatch = 'Starting',			result = output.replace(/\r?\n/g, '').match(strMatch);	var statusStartWakanda = new SystemWorker('sudo service wakanda status'),		output2 = '';	statusStartWakanda.onmessage = function () { 		if (arguments[0].data != null) {			console.log("statusStartWakanda done : " + arguments[0].data.toString());			output2 += arguments[0].data.toString();		} else { 			console.log("statusStartWakanda failed : " + arguments[0].data.toString());		}	};	statusStartWakanda.onterminated = function () {		exitWait();	};	wait();		var statusStartWakanda2 = output2.replace(/\r?\n/g, '');	Y.Assert.areEqual(' * wakanda is running',statusStartWakanda2);	Y.Assert.areEqual('Starting',result);	}, 	testExecutionPackage_9: function () {		var restartWakanda =  new SystemWorker('sudo service wakanda restart'), 		ouput = '';	restartWakanda.onmessage = function () {		if (arguments[0].data != null) {			console.log("restartWakanda : " + arguments[0].data.toString());			output += arguments[0].data.toString();		} else {			console.log("restartWakanda failed : " + arguments[0].data.toString());		}	};	restartWakanda.onterminated = function () {		exitWait();	};	wait();		var strMatch = 'Restarting',			result = output.replace(/\r?\n/g, '').match(strMatch);	var statusRestartWakanda = new SystemWorker('sudo service wakanda status'),		output2 = '';	statusRestartWakanda.onmessage = function () {		if (arguments[0].data != null) {			console.log("statusRestartWakanda done : " + arguments[0].data.toString());			output2 += arguments[0].data.toString();		} else { 			console.log("statusRestartWakanda failed : " + arguments[0].data.toString());		}	};	statusRestartWakanda.onterminated = function () {		exitWait();	};	wait();		var statusRestartWakanda2 = output2.replace(/\r?\n/g, '');				Y.Assert.areEqual(' * wakanda is running',statusRestartWakanda2);	Y.Assert.areEqual('Restarting',result);	}, 	testExecutionPackage_10: function () {	var stopWakanda = new SystemWorker('sudo service wakanda stop'),		output = '';	stopWakanda.onmessage = function () {	   if (arguments[0].data != null) {			console.log("stopWakanda : " + arguments[0].data.toString());			output += arguments[0].data.toString();		} else {			console.log("stopWakanda failed : " + arguments[0].data.toString());		}		};	stopWakanda.onterminated = function () {		exitWait();	};	//To finish the execution of the system worker until to "exit" onterminated	wait();	var strMatch = 'Stopping',		result = output.replace(/\r?\n/g, '').match(strMatch); 	console.log("result : " + result);	var statusStopWakanda = new SystemWorker('sudo service wakanda status'), 		output2 = '';	statusStopWakanda.onmessage = function () {	   	   if (arguments[0].data != null) {			console.log("statusStopWakanda done : " + arguments[0].data.toString());			output2 += arguments[0].data.toString();		} else { 			console.log("statusStopWakanda failed : " + arguments[0].data.toString());		}		   	};	statusStopWakanda.onterminated = function () {		exitWait();	};	wait();	var statusStopWakanda2 = output2.replace(/\r?\n/g, '');	Y.Assert.areEqual(' * wakanda is not running',statusStopWakanda2);	Y.Assert.areEqual('Stopping',result);	}};if (typeof runFromCLI === 'undefined' || runFromCLI === false) {	require('unitTest').run(testCase).getReport();}